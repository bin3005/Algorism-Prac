import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.PriorityQueue;
import java.util.Scanner;
import java.util.StringTokenizer;

public class Greedy1202 {

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		Scanner in = new Scanner(System.in);
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		int cubeNum = Integer.parseInt(st.nextToken());
		int bagNum = Integer.parseInt(st.nextToken());
		ArrayList<Cube> cubeList = new ArrayList<>();
		ArrayList<Integer> bagList = new ArrayList<Integer>();
		Cube[] cubeList1 = new Cube[cubeNum];
		int[] bagList1 = new int[bagNum];
		int sum = 0 ; 
		
		
//		for(int i = 0 ; i < cubeNum ; i++) {
//			st = new StringTokenizer(br.readLine());
//			cubeList.add(new Cube(Integer.parseInt(st.nextToken()),Integer.parseInt(st.nextToken())));
//		}
//		for(int i = 0 ; i < bagNum ; i++) {
//			bagList.add(Integer.parseInt(br.readLine()));
//		}
//		
//		Collections.sort(cubeList);
//		Collections.sort(bagList);
//		int cubeCnt = 0;
//		PriorityQueue<Integer> posible = new PriorityQueue<Integer>(Collections.reverseOrder());
//		for(int i = 0 ; i < bagList.size();i++) {
//			while(cubeCnt < cubeNum && cubeList.get(cubeCnt).weight <= bagList.get(i) ) {
//				posible.add(cubeList.get(cubeCnt).price);
//				cubeCnt++;
//			}
//			if(!posible.isEmpty()) {
//				sum += posible.poll();
//			}
//		}
		for(int i = 0 ; i < cubeNum ; i++) {
			st = new StringTokenizer(br.readLine());
			cubeList1[i]= new Cube(Integer.parseInt(st.nextToken()),Integer.parseInt(st.nextToken()));
		}
		for(int i = 0 ; i < bagNum ; i++) {
			bagList1[i] = (Integer.parseInt(br.readLine()));
		}
		
		Arrays.sort(cubeList1);
		Arrays.sort(bagList1);
		System.out.println(cubeList1);
		System.out.println(bagList1);
		int cubeCnt = 0;
		PriorityQueue<Integer> posible = new PriorityQueue<Integer>(Collections.reverseOrder());
		for(int i = 0 ; i < bagList1.length;i++) {
			while(cubeCnt < cubeNum && cubeList1[cubeCnt].weight <= bagList1[i] ) {
				posible.add(cubeList1[cubeCnt].price);
				cubeCnt++;
			}
			if(!posible.isEmpty()) {
				sum += posible.poll();
			}
		}
		
		System.out.println(sum);
	}
	
	public static int lower_bound(ArrayList<Cube> list, int weight) {
		
		int left = 0;
		int right = list.size()-1;
		int mid = 0;
		
		while(left < right) {
			mid = (left+right)/2;
			if(list.get(mid).weight >= weight) {
				right = mid;
			}else {
				left = mid+1;
			}
		}
		
		
		return right;
	}
	
}

class Cube implements Comparable<Cube>{
	int weight;
	int price;
	public Cube() {
		super();
	}
	public Cube(int weight, int price) {
		super();
		this.weight = weight;
		this.price = price;
	}
	@Override
	public int compareTo(Cube cube) {

		if(weight < cube.weight) {
			return -1;
		}else if(weight == cube.weight) {
			if(price < cube.price) {
				return 1;
			}else {
				return -1;
			}
		}
		else {
			return 1;
		}
	}
	@Override
	public String toString() {
		return "Cube [weight=" + weight + ", price=" + price + "]";
	}
	
	
	
	
	
}
