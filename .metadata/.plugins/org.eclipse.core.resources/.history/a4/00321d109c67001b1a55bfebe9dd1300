import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.StringTokenizer;



public class BinarySearch10316 {

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		int cardNum = Integer.parseInt(br.readLine());
		StringTokenizer st = new StringTokenizer(br.readLine());
		ArrayList<Integer> cardList = new ArrayList();
		for(int i = 0; i < cardNum;i++) {
			cardList.add(Integer.parseInt(st.nextToken()));
		}
		int resultNum = Integer.parseInt(br.readLine());
		ArrayList<Integer> resultList = new ArrayList();
		st = new StringTokenizer(br.readLine());
		for(int i = 0; i < resultNum;i++) {
			resultList.add(Integer.parseInt(st.nextToken()));
		}
		
		Collections.sort(cardList);
		for(int i = 0 ; i < resultList.size();i++) {
			//upper_bound값이 카드더미의 마지막카드이고, 그 값이 찾는 값이면
			if( upper_bound(cardList, resultList.get(i)) == cardNum -1 && cardList.get(cardNum-1)== resultList.get(i)) {
				bw.append(upper_bound(cardList, resultList.get(i)) - lower_bound(cardList, resultList.get(i))+1+" ");
			}else {
				bw.append(upper_bound(cardList, resultList.get(i)) - lower_bound(cardList, resultList.get(i))+" ");
			}
			
		}
		
		bw.flush();
		
		
	}
	
	public static int lower_bound(ArrayList<Integer> list, int target){
		int left = 0 ;
		int right = list.size()-1;
		int mid = 0;
		
		while( left < right) {
			mid = (left+right)/2;
			if(list.get(mid) >= target) {
				right = mid;
			}else {
				left = mid +1;
			}
		}
		
		
		return right;
	}
	
	public static int upper_bound(ArrayList<Integer> list, int target){
		int left = 0 ;
		int right = list.size()-1;
		int mid = 0;
		
		while( left < right) {
			mid = (left+right)/2;
			if(list.get(mid) > target) {
				right = mid;
			}else {
				left = mid +1;
			}
		}
		
		
		return right;
	}
}
