package com.mvc.upload;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.util.WebUtils;

import com.mvc.upload.validate.FileValidator;
import com.mvc.upload.validate.UploadFile;

@Controller
public class HomeController {
	
	@Autowired
	private FileValidator fileValidator;
	

	@RequestMapping("/form")
	public String uploadForm() {

		return "upload";
	}
	
	@RequestMapping("/tomcat")
	public String tomcat() {
		
		return "tomcat";
	}

	@RequestMapping("/upload")
	public String fileUpload(HttpServletRequest request, Model model, BindingResult result, UploadFile uploadFile) {
		
		fileValidator.validate(uploadFile, result);
		if(result.hasErrors()) {
			return "upload";
		}
		
		
		MultipartFile file = uploadFile.getMpfile();
		String name = file.getOriginalFilename();
		
		UploadFile fileObj = new UploadFile();
		fileObj.setName(name);
		fileObj.setDesc(uploadFile.getDesc());
		
		InputStream inputStream = null;
		OutputStream outputStream = null;
		
		try {
			inputStream = file.getInputStream();
			String path = WebUtils.getRealPath(request.getSession().getServletContext(), "/storage");
			
			System.out.println("업로드 될 실제 경로: " + path);
			
			File storage = new File(path);
			if(!storage.exists()) {
				storage.mkdir();
			}
			
			File newFile = new File(path + "/" + name);
			if(!newFile.exists()) {
				newFile.createNewFile();
			}
			
			outputStream = new FileOutputStream(newFile);
			
			int read= 0;
			byte[] b = new byte[(int)file.getSize()];
			
			while( (read=inputStream.read(b)) != -1   ) {
				outputStream.write(b,0,read);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}finally {
			try {
				inputStream.close();
				outputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		model.addAttribute("fileObj", fileObj);
		return "download";
	}
	

}
