/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.37
 * Generated at: 2020-10-26 18:47:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.findnearcom;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import java.util.ArrayList;
import detamon.dto.JobBoardDto;

public final class getdistance_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("detamon.dto.JobBoardDto");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
 request.setCharacterEncoding("UTF-8"); 
      out.write('\r');
      out.write('\n');
 response.setContentType("text/html; charset=UTF-8"); 
      out.write("\r\n");
      out.write("    \r\n");
      out.write("  \r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-3.5.1.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=484abe6cee8cb658e2dd29b7c144de1d&libraries=services\"></script>\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("\r\n");
      out.write("<title>Insert title here</title>\r\n");

	List<JobBoardDto> list = (List<JobBoardDto>)request.getAttribute("list");

      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\t/*거리 계산 함수 (직선 거리)*/\r\n");
      out.write("\tfunction getmeter(lat1, lon1, lat2, lon2) {\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tdelta_lon = deg2rad(lon2) - deg2rad(lon1);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tdistance = Math.acos(Math.sin(deg2rad(lat1)) * Math.sin(deg2rad(lat2)) \r\n");
      out.write("\t\t\t\t+ Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\r\n");
      out.write("\t\t\t\tMath.cos(delta_lon)) *  3963.189; //마일\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tvar gap = parseInt(distance * 1609.344); return gap/1000;\r\n");
      out.write("\t};\r\n");
      out.write("\tfunction deg2rad(val) {\r\n");
      out.write("\t\tvar pi = Math.PI;\r\n");
      out.write("\t\tvar de_ra = ((eval(val))*(pi/180));\r\n");
      out.write("\t\t\r\n");
      out.write("\t\treturn de_ra; \r\n");
      out.write("\t};\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");

	for(int i = 0 ; i < list.size(); i++){

      out.write("\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\tvar geocoder = new kakao.maps.services.Geocoder();\r\n");
      out.write("\t//주소로 좌표를 검색합니다\r\n");
      out.write("\t\r\n");
      out.write("\tgeocoder.addressSearch(\"");
      out.print(list.get(i).getAddr());
      out.write("\", function(result, status) {\r\n");
      out.write("\r\n");
      out.write("\t    // 정상적으로 검색이 완료됐으면 \r\n");
      out.write("\t     if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("\t\t\t\r\n");
      out.write("  \t       var coords = new kakao.maps.LatLng(result[0].y, result[0].x);\r\n");
      out.write("\t\t\t\r\n");
      out.write("  \t       \t\t//좌표 뿌림\r\n");
      out.write("\t     \t\t$(\"#resultx\").val(result[0].y);\r\n");
      out.write("\t     \t\t$(\"#resulty\").val( result[0].x);\r\n");
      out.write("\t     \t\t\r\n");
      out.write("\t     \t\t  \r\n");
      out.write("\t\t}\r\n");
      out.write("\t    \r\n");
      out.write("\t    //거리 계산\r\n");
      out.write("\t     var km = getmeter( \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${findx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" , \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${findy}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\", $(\"#resultx\").val(), $(\"#resulty\").val() );\r\n");
      out.write("\t\t   \r\n");
      out.write("\t\t  \r\n");
      out.write("\t\t//계산 결과 hidden태그 생성해서 삽입\r\n");
      out.write("\t\t   $(\"#getdistance\").append(\"<input type='hidden' name='distance' value=\"+km+\">\");\r\n");
      out.write("\t\t\t$(\"#getdistance\").append(\"<input type='hidden' name='no' value='");
      out.print(i);
      out.write("'>\");\r\n");
      out.write("\t    \t\r\n");
      out.write("\t\t \r\n");
      out.write("\t    \t//강제 서브 밋\r\n");
      out.write("\t\t   send.submit();\r\n");
      out.write("\t   \r\n");
      out.write("\t});\r\n");
      out.write("\t</script>\r\n");

	}
	

      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("<!--  좌표 저장소 -->\r\n");
      out.write("<input type=\"hidden\" id=\"resultx\"> <br>\r\n");
      out.write("<input type=\"hidden\" id=\"resulty\"> <br>\r\n");
      out.write("\r\n");
      out.write("<!-- 폼 태그 -->\r\n");
      out.write("<form action=\"controller.do\" method=\"post\" id=\"getdistance\" name=\"send\">\r\n");
      out.write("\t<input type=\"hidden\" value=\"findnearcomres\" name=\"command\">\r\n");
      out.write("\t<input type=\"hidden\" value=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${findaddr }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(" name=\"findaddr\">\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
